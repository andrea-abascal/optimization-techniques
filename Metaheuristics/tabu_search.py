# -*- coding: utf-8 -*-
"""Tabu_Search.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C2a4fj2PUkopjkcI7KX5LyrslgnRUIb2
"""

import random

def calculate_total_waiting_time(solution, waiting_times):
    """Calculates the total waiting time for a given solution (non-circular)."""
    total_waiting_time = 0
    for r in range(len(solution) - 1):
        i = solution[r]
        j = solution[r + 1]
        total_waiting_time += waiting_times[i - 1][j - 1]
    return total_waiting_time

def swap_two(solution, i, j):
  """Swaps two elements in the solution."""
  new_solution = solution[:]
  new_solution[i], new_solution[j] = new_solution[j], new_solution[i]
  return new_solution

def tabu_search(initial_solution, iterations, tabu_tenure, waiting_times):
  """Performs tabu search to minimize waiting times."""

  current_solution = initial_solution
  best_solution = initial_solution
  best_waiting_time = calculate_total_waiting_time(initial_solution, waiting_times)

  tabu_list = []

  for _ in range(iterations):
    neighborhood = []
    for i in range(len(current_solution)):
      for j in range(i + 1, len(current_solution)):
        neighbor = swap_two(current_solution, i,j)
        neighborhood.append(neighbor)

    best_neighbor = None
    min_waiting_time = float('inf')

    for neighbor in neighborhood:
      neighbor_tuple = tuple(neighbor) #For tabu list comparison
      if neighbor_tuple not in tabu_list:
          waiting_time = calculate_total_waiting_time(neighbor, waiting_times)
          if waiting_time < min_waiting_time:
            min_waiting_time = waiting_time
            best_neighbor = neighbor

    if best_neighbor is not None:
      current_solution = best_neighbor
      if min_waiting_time < best_waiting_time:
        best_solution = current_solution
        best_waiting_time = min_waiting_time

      tabu_list.append(tuple(current_solution)) #Add to tabu list
      if len(tabu_list) > tabu_tenure:
        tabu_list.pop(0) #Remove oldest tabu

      print("Current solution: ", current_solution)
      print("Current waiting time: ", min_waiting_time)
      print("Tabu list: ", tabu_list)
      print("Best solution: ", best_solution)
      print("Best waiting time: ", best_waiting_time)


  return best_solution, best_waiting_time

#Example Usage
waiting_times = [[0,2,6,4,3,2],[1,0,4,6,5,2],[3,7,0,8,7,6],[7,8,3,0,8,3],[4,7,6,1,0,5],[5,3,1,2,7,0]]
initial_solution = [1, 2, 3, 4, 5, 6]
iterations = 5
tabu_tenure = 3

best_solution, best_waiting_time = tabu_search(initial_solution, iterations, tabu_tenure, waiting_times)
print("Best solution:", best_solution)
print("Minimum waiting time:", best_waiting_time)
print("Total time:", best_waiting_time + 21)

# prompt: i want to print the current solution , current best solution, tabu list etc.. on each iteration, the tabu list should include the tabu swaps not the solutions

import random

waiting_times = [[0,2,6,4,3,2],[1,0,4,6,5,2],[3,7,0,8,7,6],[7,8,3,0,8,3],[4,7,6,1,0,5],[5,3,1,2,7,0]]

def calculate_total_waiting_time(solution, waiting_times):
    """Calculates the total waiting time for a given solution (non-circular)."""
    total_waiting_time = 0
    for r in range(len(solution) - 1):
        i = solution[r]
        j = solution[r + 1]
        total_waiting_time += waiting_times[i - 1][j - 1]
    return total_waiting_time

def swap_two(solution, i, j):
  """Swaps two elements in the solution."""
  new_solution = solution[:]
  new_solution[i], new_solution[j] = new_solution[j], new_solution[i]
  return new_solution

def tabu_search(initial_solution, iterations, tabu_tenure, waiting_times):
  """Performs tabu search to minimize waiting times."""

  current_solution = initial_solution
  best_solution = initial_solution
  best_waiting_time = calculate_total_waiting_time(initial_solution, waiting_times)

  tabu_list = []

  for _ in range(iterations):
    neighborhood = []
    for i in range(len(current_solution)):
      for j in range(i + 1, len(current_solution)):
        neighbor = swap_two(current_solution, i,j)
        neighborhood.append(neighbor)

    best_neighbor = None
    min_waiting_time = float('inf')

    #This part is modified to print the swaps
    best_swap = None

    for neighbor in neighborhood:
      swap = None
      for i in range(len(current_solution)):
        if current_solution[i] != neighbor[i]:
          for j in range(i+1, len(current_solution)):
            if current_solution[j] != neighbor[j]:
              swap = (i,j)
              break
          break

      if swap and swap not in tabu_list:
          waiting_time = calculate_total_waiting_time(neighbor, waiting_times)
          if waiting_time < min_waiting_time:
            min_waiting_time = waiting_time
            best_neighbor = neighbor
            best_swap = swap

    if best_neighbor is not None:
      current_solution = best_neighbor
      if min_waiting_time < best_waiting_time:
        best_solution = current_solution
        best_waiting_time = min_waiting_time

      tabu_list.append(best_swap) #Add to tabu list
      if len(tabu_list) > tabu_tenure:
        tabu_list.pop(0) #Remove oldest tabu

      print("Current solution: ", current_solution)
      print("Current waiting time: ", min_waiting_time)
      print("Tabu list: ", tabu_list)
      print("Best solution: ", best_solution)
      print("Best waiting time: ", best_waiting_time)
      print("-" * 20) # separator between iterations

  return best_solution, best_waiting_time

#Example Usage
waiting_times = [[0,2,6,4,3,2],[1,0,4,6,5,2],[3,7,0,8,7,6],[7,8,3,0,8,3],[4,7,6,1,0,5],[5,3,1,2,7,0]]
initial_solution = [1, 2, 3, 4, 5, 6]
iterations = 5
tabu_tenure = 3

best_solution, best_waiting_time = tabu_search(initial_solution, iterations, tabu_tenure, waiting_times)
print("Best solution:", best_solution)
print("Minimum waiting time:", best_waiting_time)
print("Total time:", best_waiting_time + 21)

