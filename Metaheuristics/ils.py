# -*- coding: utf-8 -*-
"""ILS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g7C-Rt84vwOry7JngMBi53keH7tzxf2N
"""

import random

# Data from the model
utilities = [80, 60, 50, 40, 70, 65, 30, 100, 20, 75]
times = [4, 7, 3, 6, 5, 9, 2, 8, 1, 5]
products = list(zip(times, utilities))
capacity = 40

# Greedy function based on utility/time ratio
def greedy_selection(products, capacity):
    ratio = [(i, util / time) for i, (time, util) in enumerate(products)]
    ratio.sort(key=lambda x: x[1], reverse=True)

    total_time = 0
    selection = []
    for idx, _ in ratio:
        time, util = products[idx]
        if total_time + time <= capacity:
            selection.append(idx)
            total_time += time
    return selection

# Evaluate the total utility of a solution
def total_utility(selection, products):
    return sum(products[i][1] for i in selection)

# Generate a neighbor for ILS
def generate_neighbor(solution, products, capacity):
    neighbor = solution.copy()

    if random.random() < 0.5 and neighbor:
        neighbor.remove(random.choice(neighbor))  # Remove a product

    candidates = [i for i in range(len(products)) if i not in neighbor]
    random.shuffle(candidates)

    current_time = sum(products[i][0] for i in neighbor)

    for c in candidates:
        time, _ = products[c]
        if current_time + time <= capacity:
            neighbor.append(c)
            current_time += time

    return neighbor

# Iterated Local Search
def ILS(products, capacity, iterations=100):
    best_solution = greedy_selection(products, capacity)
    history = [best_solution]

    for _ in range(iterations):
        neighbor = generate_neighbor(best_solution, products, capacity)
        if total_utility(neighbor, products) > total_utility(best_solution, products):
            best_solution = neighbor
            history.append(best_solution)

    return history[-5:]  # Last 5 solutions

# Run Greedy
greedy_solution = greedy_selection(products, capacity)
print("Greedy Solution:", greedy_solution)
print("Greedy Utility:", total_utility(greedy_solution, products))

# Run ILS
last_solutions = ILS(products, capacity, iterations=100)
print("\nLast 5 solutions (ILS):")
for i, sol in enumerate(last_solutions, 1):
    print(f"Solution {i}: {sol}, Utility = {total_utility(sol, products)}")